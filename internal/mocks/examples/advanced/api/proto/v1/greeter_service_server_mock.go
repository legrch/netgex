// Code generated by mockery v2.53.3. DO NOT EDIT.

package greeterv1

import (
	context "context"

	greeterv1 "github.com/legrch/netgex/examples/advanced/api/proto/v1"
	mock "github.com/stretchr/testify/mock"
)

// GreeterServiceServer is an autogenerated mock type for the GreeterServiceServer type
type GreeterServiceServer struct {
	mock.Mock
}

type GreeterServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *GreeterServiceServer) EXPECT() *GreeterServiceServer_Expecter {
	return &GreeterServiceServer_Expecter{mock: &_m.Mock}
}

// SayHello provides a mock function with given fields: _a0, _a1
func (_m *GreeterServiceServer) SayHello(_a0 context.Context, _a1 *greeterv1.SayHelloRequest) (*greeterv1.SayHelloResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SayHello")
	}

	var r0 *greeterv1.SayHelloResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greeterv1.SayHelloRequest) (*greeterv1.SayHelloResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greeterv1.SayHelloRequest) *greeterv1.SayHelloResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greeterv1.SayHelloResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greeterv1.SayHelloRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GreeterServiceServer_SayHello_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SayHello'
type GreeterServiceServer_SayHello_Call struct {
	*mock.Call
}

// SayHello is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *greeterv1.SayHelloRequest
func (_e *GreeterServiceServer_Expecter) SayHello(_a0 interface{}, _a1 interface{}) *GreeterServiceServer_SayHello_Call {
	return &GreeterServiceServer_SayHello_Call{Call: _e.mock.On("SayHello", _a0, _a1)}
}

func (_c *GreeterServiceServer_SayHello_Call) Run(run func(_a0 context.Context, _a1 *greeterv1.SayHelloRequest)) *GreeterServiceServer_SayHello_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*greeterv1.SayHelloRequest))
	})
	return _c
}

func (_c *GreeterServiceServer_SayHello_Call) Return(_a0 *greeterv1.SayHelloResponse, _a1 error) *GreeterServiceServer_SayHello_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GreeterServiceServer_SayHello_Call) RunAndReturn(run func(context.Context, *greeterv1.SayHelloRequest) (*greeterv1.SayHelloResponse, error)) *GreeterServiceServer_SayHello_Call {
	_c.Call.Return(run)
	return _c
}

// SayHelloStream provides a mock function with given fields: _a0, _a1
func (_m *GreeterServiceServer) SayHelloStream(_a0 *greeterv1.SayHelloRequest, _a1 greeterv1.GreeterService_SayHelloStreamServer) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SayHelloStream")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*greeterv1.SayHelloRequest, greeterv1.GreeterService_SayHelloStreamServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GreeterServiceServer_SayHelloStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SayHelloStream'
type GreeterServiceServer_SayHelloStream_Call struct {
	*mock.Call
}

// SayHelloStream is a helper method to define mock.On call
//   - _a0 *greeterv1.SayHelloRequest
//   - _a1 greeterv1.GreeterService_SayHelloStreamServer
func (_e *GreeterServiceServer_Expecter) SayHelloStream(_a0 interface{}, _a1 interface{}) *GreeterServiceServer_SayHelloStream_Call {
	return &GreeterServiceServer_SayHelloStream_Call{Call: _e.mock.On("SayHelloStream", _a0, _a1)}
}

func (_c *GreeterServiceServer_SayHelloStream_Call) Run(run func(_a0 *greeterv1.SayHelloRequest, _a1 greeterv1.GreeterService_SayHelloStreamServer)) *GreeterServiceServer_SayHelloStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*greeterv1.SayHelloRequest), args[1].(greeterv1.GreeterService_SayHelloStreamServer))
	})
	return _c
}

func (_c *GreeterServiceServer_SayHelloStream_Call) Return(_a0 error) *GreeterServiceServer_SayHelloStream_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GreeterServiceServer_SayHelloStream_Call) RunAndReturn(run func(*greeterv1.SayHelloRequest, greeterv1.GreeterService_SayHelloStreamServer) error) *GreeterServiceServer_SayHelloStream_Call {
	_c.Call.Return(run)
	return _c
}

// NewGreeterServiceServer creates a new instance of GreeterServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGreeterServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *GreeterServiceServer {
	mock := &GreeterServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
