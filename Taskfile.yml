version: '3'
#
# Tasks
#
tasks:
  #
  # Main Tasks
  #
  default:
    cmds:
      - task: run

  # Add tools to go.mod using the new -tool flag in Go 1.24
  tools:setup:
    desc: Set up tool dependencies in go.mod
    cmds:
      - go get -tool github.com/golangci/golangci-lint/cmd/golangci-lint@v1.58.1
      - go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.19.1
      - go get -tool google.golang.org/protobuf/cmd/protoc-gen-go@v1.32.0
      - go get -tool google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0
      - go get -tool github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.19.1
      - go get -tool golang.org/x/tools/cmd/goimports@v0.20.0
      - go get -tool github.com/vektra/mockery/v2@v2.53.3
      - go get -tool github.com/golang/mock/mockgen@v1.6.0

  # Install all tools in go.mod
  tools:install:
    desc: Install all tool dependencies from go.mod
    cmds:
      - go install tool

  # List all tools in go.mod
  tools:list:
    desc: List all tool dependencies in go.mod
    cmds:
      - grep -A 20 "^tool (" go.mod || echo "No tool dependencies found"
      
  # Run specific tools using go tool
  lint:
    desc: Run golangci-lint
    cmds:
      - go mod tidy
      - go fmt ./...
      - task: imports
      - golangci-lint run ./...
      
      
  mock:
    desc: Generate mocks using mockery
    cmds:
      - rm -rf internal/mocks
      - mockery
      
  imports:
    desc: Format imports
    cmds:
      - goimports -w .
      
  # Testing tasks
  test:
    desc: Run all tests
    cmds:
      - go test -race -v ./...
      
  test:unit:
    desc: Run unit tests only
    cmds:
      - go test -race -v -short ./...
      
  test:coverage:
    desc: Run tests with coverage and generate report
    cmds:
      - go test -race -coverprofile=coverage.out -covermode=atomic ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report generated at coverage.html"

  # Release tasks
  prepare-release:
    desc: Prepare a new release
    cmds:
      - scripts/prepare-release.sh "{{.CLI_ARGS}}"
    preconditions:
      - sh: test -f scripts/prepare-release.sh
        msg: "scripts/prepare-release.sh file not found. Please create it first."

  build-release:
    desc: Build release artifacts
    cmds:
      - mkdir -p dist
      - GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/netgex_linux_amd64 ./examples/simple/main.go
      - GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/netgex_darwin_amd64 ./examples/simple/main.go
      - GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/netgex_darwin_arm64 ./examples/simple/main.go
      - GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/netgex_windows_amd64.exe ./examples/simple/main.go
      - echo "Release artifacts built successfully in dist/ directory"
    preconditions:
      - sh: test -f ./examples/simple/main.go
        msg: "Example main.go file not found. Please create it first."

  checksum:
    desc: Generate checksums for release artifacts
    deps: [build-release]
    cmds:
      - cd dist && shasum -a 256 * > checksums.txt
      - echo "Checksums generated in dist/checksums.txt"

  release:
    desc: Create and publish a new GitHub release
    deps: [checksum]
    vars:
      VERSION:
        sh: cat VERSION
      RELEASE_CONFIG: .release.yml
    cmds:
      - |
        if [ ! -f {{.RELEASE_CONFIG}} ]; then
          echo "Release config not found. Run 'task prepare-release' first."
          exit 1
        fi
        
        VERSION="{{.VERSION}}" && \
        TITLE=$(yq eval '.title' {{.RELEASE_CONFIG}} | envsubst) && \
        
        # Extract notes from .release.yml
        NOTES=$(yq eval '.notes' {{.RELEASE_CONFIG}} | envsubst) && \
        
        # Get changelog entries
        CHANGELOG_ENTRY=$(awk -v ver="${VERSION}" 'BEGIN {found=0} /^## \['ver'\]/ {found=1} /^## \[/ && found==1 && $0 !~ ver {exit} found==1 {print}' CHANGELOG.md) && \
        
        # Combine notes with changelog
        FULL_NOTES="${NOTES}
        
        ---
        
        ${CHANGELOG_ENTRY}" && \
        
        # Create release with all artifacts in dist/
        echo "Creating GitHub release v${VERSION}..." && \
        gh release create v${VERSION} dist/* \
          --title "${TITLE}" \
          --notes "${FULL_NOTES}"
    preconditions:
      - sh: command -v gh >/dev/null
        msg: "GitHub CLI (gh) not found. Please install it first: https://cli.github.com/"
      - sh: command -v yq >/dev/null
        msg: "yq not found. Please install it first: https://github.com/mikefarah/yq"
      - sh: command -v envsubst >/dev/null
        msg: "envsubst not found. Please install it first (part of gettext package)"
